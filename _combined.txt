// src/app/page.tsx
"use client";

import { useEffect, useState } from "react";
import styles from "./page.module.css";
import { getHomePageVideo } from "../utils/getHomePageVideo";

const Home: React.FC = () => {
  const [videoUrl, setVideoUrl] = useState<string>('');
  const [backgroundVideoLoaded, setBackgroundVideoLoaded] = useState<boolean>(false);

  useEffect(() => {
    const fetchVideo = async () => {
      const url = await getHomePageVideo();
      setVideoUrl(url);
    };
    fetchVideo();
  }, []);

 const handleBackgroundVideoLoaded = () => {
    setBackgroundVideoLoaded(true);
 }  

  return (
    <main className={styles.main}>
      {videoUrl && (
        <video onLoad={() => handleBackgroundVideoLoaded()} preload="true" className={styles.backgroundVideo} autoPlay loop muted playsInline>
          <source src={videoUrl} type="video/mp4" />
        </video>
      )}
    </main>
  );
};

export default Home;

"use client";

import { useState, useEffect } from "react";
import { Container, Typography, TextField, Button, Box, Alert, CircularProgress } from "@mui/material";
import { getSettings } from "../../utils/getSettings";
import { getPortfolio } from "../../utils/getPortfolio";
import Header from "../../components/header";

import dynamic from 'next/dynamic';
import { set } from "firebase/database";

const PdfViewer = dynamic(() => import('../../components/PdfViewer'), { ssr: false });

const Portfolio: React.FC = () => {
  const [settings, setSettings] = useState<any>(null);
  const [password, setPassword] = useState<string>('');
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [portfolioFile, setPortfolioFile] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [authenticating, setAuthenticating] = useState<boolean>(false);

  useEffect(() => {
    const fetchSettings = async () => {
      const fetchedSettings = await getSettings();
      setSettings(fetchedSettings);
    };
    fetchSettings();
  }, []);

  useEffect(() => {
    const fetchPortfolio = async () => {
      const portfolio = await getPortfolio();
      if (portfolio) {
        setPortfolioFile(portfolio.file_url);
      }
    };
    fetchPortfolio();
  }, []);

  const handlePasswordSubmit = () => {
    if (settings && settings.portfolio_password === password) {
      setTimeout(() => {
           setAuthenticating(true);
      }, 100);
   

      setTimeout(() => {
        setIsAuthenticated(true);
        setError(null);
        setAuthenticating(false);
      }, 500);
    } else {
      setError('Incorrect password. Please try again.');
    }
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      handlePasswordSubmit();
    }
  };

  return (
    <>
      <Container sx={{ mt: 4, height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            opacity: isAuthenticated ? 0 : 1,
            transition: 'opacity 0.2s ease-in-out',
            zIndex: isAuthenticated ? -1 : 1,
          }}
        >
          <Box display="flex" flexDirection="column" alignItems="center" justifyContent="center" sx={{ mt: 4 }}>
            <Typography sx={{ fontFamily: 'monospace', textAlign: 'center' }}>Enter password to access the portfolio</Typography>
            <TextField
              type="text"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyDown={handleKeyDown}
              fullWidth
              autoComplete='off'
              size="small"
              sx={{
                my: 2,
                maxWidth: 300,
                fontFamily: 'monospace',
                letterSpacing: '0.1em',
                input: {
                  fontFamily: 'monospace',
                  letterSpacing: '0.1em',
                  WebkitTextSecurity: 'disc',
                  MozTextSecurity: 'disc', 
                  textSecurity: 'disc',  
                },
              }}
            />
            <Button sx={{backgroundColor: authenticating ? "gray !important" : "black",
            transition: 'background-color 0.4s ease-in-out',}} variant="contained" onClick={handlePasswordSubmit}>
              Submit
              {/* {authenticating && <CircularProgress size={13} sx={{ ml: '0.4rem' }} color="inherit" />} */}
            </Button>
            {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
          </Box>
        </Box>

        <Box
          sx={{
            opacity: isAuthenticated ? 1 : 0,
            transition: 'opacity 0.2s ease-in-out',
            zIndex: isAuthenticated ? 1 : -1,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%',
            marginTop: '3rem',
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
          }}
        >
          {portfolioFile ? (
            <PdfViewer fileUrl={portfolioFile} />
          ) : (
            <Box
              sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                height: '100%',
              }}
            >
              <Typography variant="h6">No portfolio yet. Come back later!</Typography>
              <Button variant="contained" color="primary" href="/" sx={{ mt: 2 }}>
                Go Home
              </Button>
            </Box>
          )}
        </Box>
      </Container>
    </>
  );
};

export default Portfolio;

// src/app/layout.tsx
import { ReactNode } from "react";
import ClientLayout from './ClientLayout';

export const metadata = {
  title: "Ela Kuester",
  description: "London based fashion designer, stylist and artist.",
};

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html style={{ height: '100%' }} lang="en">
      <body style={{ height: '100%' }}>
        <ClientLayout>
          {children}
        </ClientLayout>
      </body>
    </html>
  );
}

// src/components/header.tsx
"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Spin as Hamburger } from 'hamburger-react';
import styles from './header.module.css';

const Header: React.FC = () => {
  const [isOpen, setOpen] = useState<boolean>(false);
  const pathname = usePathname();
  const [isWhite, setIsWhite] = useState<boolean>(false);

  useEffect(() => {
    const whiteRoutes = ['/'];
    setIsWhite(whiteRoutes.includes(pathname));
  }, [pathname]);

  const handleLinkClick = () => {
    //set a little timeout to close the menu after clicking a link
    setTimeout(() => {
      setOpen(false);
    }, 200);
    // setOpen(false);
  };

  return (
    <>
      <nav className={`${styles.nav} ${isOpen ? styles.active : ''}`}>
        <div className={styles.navContent}>
          <Link href="/" className={`${styles.logo} ${isOpen ? styles.logoActive : ''} ${isWhite ? styles.forceWhite : ''}`}>
            Ela Kuester
          </Link>
          <div className={styles.hamburger}>
            <Hamburger duration={0.4} rounded={true} color={isOpen || !isWhite ? 'black' : 'white'} toggled={isOpen} toggle={setOpen} />
          </div>
        </div>
        <div className={styles.menu}>
          <Link prefetch={true} href="/" className={styles.menuItem} onClick={handleLinkClick}>Home</Link>
          <Link prefetch={true} href="/fashion" className={styles.menuItem} onClick={handleLinkClick}>Fashion</Link>
          <Link prefetch={true} href="/art" className={styles.menuItem} onClick={handleLinkClick}>Art</Link>
          <Link prefetch={true} href="/portfolio" className={styles.menuItem} onClick={handleLinkClick}>Portfolio</Link>
          <Link prefetch={true} href="/about" className={styles.menuItem} onClick={handleLinkClick}>About</Link>
          <Link prefetch={true} href="/contact" className={styles.menuItem} onClick={handleLinkClick}>Contact</Link>
        </div>
      </nav>
    </>
  );
};

export default Header;

/* src/components/header.module.css */

.nav {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
  font-family: 'NeueHaasDisplay', sans-serif;
  letter-spacing: 0.02rem;
}

.nav a {

  transition: text-shadow 0.2s ease; /* Para una transición suave del color */
}

.nav a:hover {
  text-shadow: 0 0 2px rgba(0, 0, 0, 0.3);
} 

.navContent {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 0 auto;
  padding: 1rem 2.3rem;
}

.logo {
  font-size: 1.75rem;
  letter-spacing: -0.02rem;
  font-weight: normal;
  text-decoration: none;
  z-index: 1000;
  color: var(--header-color, black); /* Color personalizable */
  transition: color 0.3s ease-in-out !important; /* Para una transición suave del color */
}

.logoActive {
  color: black !important; /* Color del logo cuando el menú está activo */
}

.forceWhite {
  color: white; 
}

.hamburger {
  display: flex;
  align-items: center;
  z-index: 1000;
  color: var(--header-color, black); /* Color personalizable */
}

.menu {
  position: fixed;
  left: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  z-index: 999;
  background-color: white;
  right: 0;
  transition: all ease 0.3s;
  opacity: 0;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.menuItem {
  margin: 1.2rem 0;
  font-size: 1.5rem;
  text-decoration: none;
  color: black;
}

.nav.active .menu {
  opacity: 1;
  pointer-events: all;
}

 .hamburger-react div {
  height: 2px !important; 
}
:root {
  --max-width: 1100px;
  --border-radius: 12px;
  --font-mono: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;

  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;

  --primary-glow: conic-gradient(
    from 180deg at 50% 50%,
    #16abff33 0deg,
    #0885ff33 55deg,
    #54d6ff33 120deg,
    #0071ff33 160deg,
    transparent 360deg
  );
  --secondary-glow: radial-gradient(
    rgba(255, 255, 255, 1),
    rgba(255, 255, 255, 0)
  );

  --tile-start-rgb: 239, 245, 249;
  --tile-end-rgb: 228, 232, 233;
  --tile-border: conic-gradient(
    #00000080,
    #00000040,
    #00000030,
    #00000020,
    #00000010,
    #00000010,
    #00000080
  );

  --callout-rgb: 238, 240, 241;
  --callout-border-rgb: 172, 175, 176;
  --card-rgb: 180, 185, 188;
  --card-border-rgb: 131, 134, 135;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayBlack.ttf') format('truetype');
  font-weight: 900;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayBlackItalic.ttf') format('truetype');
  font-weight: 900;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayBold.ttf') format('truetype');
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayBoldItalic.ttf') format('truetype');
  font-weight: 700;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayLight.ttf') format('truetype');
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayLightItalic.ttf') format('truetype');
  font-weight: 300;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayMediu.ttf') format('truetype');
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayMediumItalic.ttf') format('truetype');
  font-weight: 500;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayRoman.ttf') format('truetype');
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayRomanItalic.ttf') format('truetype');
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayThin.ttf') format('truetype');
  font-weight: 100;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayThinItalic.ttf') format('truetype');
  font-weight: 100;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayXThin.ttf') format('truetype');
  font-weight: 50;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayXThinItalic.ttf') format('truetype');
  font-weight: 50;
  font-style: italic;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayXXThin.ttf') format('truetype');
  font-weight: 25;
  font-style: normal;
}

@font-face {
  font-family: 'NeueHaasDisplay';
  src: url('/fonts/NeueHaasDisplayXXThinItalic.ttf') format('truetype');
  font-weight: 25;
  font-style: italic;
}



@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;

    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    --secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );

    --tile-start-rgb: 2, 13, 46;
    --tile-end-rgb: 2, 5, 19;
    --tile-border: conic-gradient(
      #ffffff80,
      #ffffff40,
      #ffffff30,
      #ffffff20,
      #ffffff10,
      #ffffff10,
      #ffffff80
    );

    --callout-rgb: 20, 20, 20;
    --callout-border-rgb: 108, 108, 108;
    --card-rgb: 100, 100, 100;
    --card-border-rgb: 200, 200, 200;
  }
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
  height: 100%;
}

body {
 
  font-family: 'NeueHaasDisplay', sans-serif;

  
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

